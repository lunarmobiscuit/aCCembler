0000fe          ; GLOBAL @TXTPTR
0003ff          ; GLOBAL @TXTROW
0003fe          ; GLOBAL @TXTPOS
000200          ; GLOBAL @TXTBUFFER
000000          ; GLOBAL @ARG0

ff0000 ; SUB Start:
ff0000 4f 4c 00 02 ff     jmp.a24 $ff0200
ff0005 4f 4c 78 04 ff     jmp.a24 $ff0478
ff000a 4f 4c bd 04 ff     jmp.a24 $ff04bd

; 497 BYTES of FILLER

ff0200 ; SUB Reset:
ff0200 d8                 cld
ff0201 a2 ff              ldx #$ff
ff0203 9a                 txs
ff0204 ad 51 c0           lda $c051
ff0207 ad 54 c0           lda $c054
ff020a ad 58 c0           lda $c058
ff020d ad 5a c0           lda $c05a
ff0210 ad 5d c0           lda $c05d
ff0213 ad 5f c0           lda $c05f
ff0216 ad ff cf           lda $cfff
ff0219 2c 10 c0           bit $c010
ff021c a2 00              ldx #$0
ff021e 4f 20 78 04 ff     jsr.a24 $ff0478
ff0223 4f 20 37 02 ff     jsr.a24 $ff0237
ff0228 a9 02              lda #$2
ff022a 8d ff 03           sta $03ff
ff022d a9 00              lda #$0
ff022f 8d fe 03           sta $03fe
ff0232 4f 4c 4c 02 ff     jmp.a24 $ff024c

ff0237 ; SUB AppleII4:
ff0237                  FORff0237_start:
ff0237                   ; FOR x = 0 TO 255 {
ff0237 a2 00              ldx #$0
ff0239                  FORff0237_loop:
ff0239 4f bd 30 80 ff     lda.a24 $ff8030,X
ff023e f0 0a              beq +10 [ff024a] forff0237_end
ff0240 09 80              ora #$80
ff0242 9d 00 04           sta $0400,X
ff0245 e8                 inx
ff0246 c9 ff              cmp #$ff
ff0248 d0 ef              bne -17 [ff0239] FORff0237_loop
ff024a                  FORff0237_end:
ff024a 4f 60              rts.a24

ff024c ; SUB EchoKeys:
ff024c 4f 20 f8 04 ff     jsr.a24 $ff04f8
ff0251                  LOOPff0251_start:
ff0251                   ; LOOP {
ff0251                  LOOPff0251_loop:
ff0251 4f 20 6a 04 ff     jsr.a24 $ff046a
ff0256 ad fe 03           lda $03fe
ff0259 d0 0a              bne +10 [ff0265] echo_read
ff025b                  draw_prompt:
ff025b a0 00              ldy #$0
ff025d a9 3a              lda #$3a
ff025f 91 fe              sta ($fe),Y
ff0261 c8                 iny
ff0262 8c fe 03           sty $03fe
ff0265                  echo_read:
ff0265 2c 00 c0           bit $c000
ff0268 10 fb              bpl -5 [ff0265] echo_read
ff026a ad 00 c0           lda $c000
ff026d 2c 10 c0           bit $c010
ff0270                   ; IF == 141 {
ff0270 c9 8d              cmp #$8d
ff0272 d0 11              bne +17 [ff0285] IFff0270_end
ff0274 4f 20 94 04 ff     jsr.a24 $ff0494
ff0279 4f 20 d0 02 ff     jsr.a24 $ff02d0
ff027e 4f 20 f8 04 ff     jsr.a24 $ff04f8
ff0283                   ; CONTINUE
ff0283 80 cc              bra -52 [ff0251] loopff0251_start
ff0285                  IFff0270_end:
ff0285                   ; IF == 136 {
ff0285 c9 88              cmp #$88
ff0287 d0 14              bne +20 [ff029d] IFff0285_end
ff0289 ad fe 03           lda $03fe
ff028c                   ; IF > 1 {
ff028c c9 01              cmp #$1
ff028e f0 0b              beq +11 [ff029b] IFff028c_end
ff0290 90 09              bcc +9 [ff029b] IFff028c_end
ff0292 a8                 tay
ff0293 88                 dey
ff0294 8c fe 03           sty $03fe
ff0297 a9 a0              lda #$a0
ff0299 91 fe              sta ($fe),Y
ff029b                  IFff028c_end:
ff029b                   ; CONTINUE
ff029b 80 b4              bra -76 [ff0251] loopff0251_start
ff029d                  IFff0285_end:
ff029d                   ; IF == 155 {
ff029d c9 9b              cmp #$9b
ff029f d0 13              bne +19 [ff02b4] IFff029d_end
ff02a1 a2 02              ldx #$2
ff02a3 4f 20 78 04 ff     jsr.a24 $ff0478
ff02a8 a9 02              lda #$2
ff02aa 8d ff 03           sta $03ff
ff02ad a9 00              lda #$0
ff02af 8d fe 03           sta $03fe
ff02b2                   ; CONTINUE
ff02b2 80 9d              bra -99 [ff0251] loopff0251_start
ff02b4                  IFff029d_end:
ff02b4                   ; IF > 159 {
ff02b4 c9 9f              cmp #$9f
ff02b6 f0 14              beq +20 [ff02cc] IFff02b4_end
ff02b8 90 12              bcc +18 [ff02cc] IFff02b4_end
ff02ba ac fe 03           ldy $03fe
ff02bd c0 28              cpy #$28
ff02bf                   ; IF != {
ff02bf f0 0b              beq +11 [ff02cc] IFff02bf_end
ff02c1 91 fe              sta ($fe),Y
ff02c3 29 7f              and #$7f
ff02c5 88                 dey
ff02c6 99 00 02           sta $0200,Y
ff02c9 ee fe 03           inc $03fe
ff02cc                  IFff02bf_end:
ff02cc                  IFff02b4_end:
ff02cc 80 83              bra -125 [ff0251] LOOPff0251_loop
ff02ce                  LOOPff0251_end:

ff02ce ; DATA ShouldNotGetHere:
ff02ce fe
ff02cf db

ff02d0 ; SUB CommandLine:
ff02d0 2f a9 3a 80 ff     lda.t #$ff803a
ff02d5 2f 85 00           sta.t $00
ff02d8 4f 20 56 03 ff     jsr.a24 $ff0356
ff02dd                   ; IF != {
ff02dd f0 07              beq +7 [ff02e6] IFff02dd_end
ff02df 4f 20 80 03 ff     jsr.a24 $ff0380
ff02e4 4f 60              rts.a24
ff02e6                  IFff02dd_end:
ff02e6 2f a9 40 80 ff     lda.t #$ff8040
ff02eb 2f 85 00           sta.t $00
ff02ee 4f 20 56 03 ff     jsr.a24 $ff0356
ff02f3                   ; IF != {
ff02f3 f0 07              beq +7 [ff02fc] IFff02f3_end
ff02f5 4f 20 93 03 ff     jsr.a24 $ff0393
ff02fa 4f 60              rts.a24
ff02fc                  IFff02f3_end:
ff02fc 2f a9 47 80 ff     lda.t #$ff8047
ff0301 2f 85 00           sta.t $00
ff0304 4f 20 56 03 ff     jsr.a24 $ff0356
ff0309                   ; IF != {
ff0309 f0 07              beq +7 [ff0312] IFff0309_end
ff030b 4f 20 58 04 ff     jsr.a24 $ff0458
ff0310 4f 60              rts.a24
ff0312                  IFff0309_end:
ff0312 2f a9 4d 80 ff     lda.t #$ff804d
ff0317 2f 85 00           sta.t $00
ff031a 4f 20 56 03 ff     jsr.a24 $ff0356
ff031f                   ; IF != {
ff031f f0 07              beq +7 [ff0328] IFff031f_end
ff0321 4f 20 5e 04 ff     jsr.a24 $ff045e
ff0326 4f 60              rts.a24
ff0328                  IFff031f_end:
ff0328 2f a9 50 80 ff     lda.t #$ff8050
ff032d 2f 85 00           sta.t $00
ff0330 4f 20 56 03 ff     jsr.a24 $ff0356
ff0335                   ; IF != {
ff0335 f0 07              beq +7 [ff033e] IFff0335_end
ff0337 4f 20 07 05 ff     jsr.a24 $ff0507
ff033c 4f 60              rts.a24
ff033e                  IFff0335_end:
ff033e 2f a9 55 80 ff     lda.t #$ff8055
ff0343 2f 85 00           sta.t $00
ff0346 4f 20 56 03 ff     jsr.a24 $ff0356
ff034b                   ; IF != {
ff034b f0 07              beq +7 [ff0354] IFff034b_end
ff034d 4f 20 4c 05 ff     jsr.a24 $ff054c
ff0352 4f 60              rts.a24
ff0354                  IFff034b_end:
ff0354 4f 60              rts.a24

ff0356 ; SUB CompareText:
ff0356                  FORff0356_start:
ff0356                   ; FOR y = 0 TO 39 {
ff0356 a0 00              ldy #$0
ff0358                  FORff0356_loop:
ff0358 b9 00 02           lda $0200,Y
ff035b 4f d1 00           cmp.a24 ($00),Y
ff035e                   ; IF != {
ff035e f0 04              beq +4 [ff0364] IFff035e_end
ff0360 a9 00              lda #$0
ff0362 4f 60              rts.a24
ff0364                  IFff035e_end:
ff0364                   ; IF == 0 {
ff0364 c9 00              cmp #$0
ff0366 d0 0f              bne +15 [ff0377] IFff0364_end
ff0368 4f b1 00           lda.a24 ($00),Y
ff036b                   ; IF == 0 {
ff036b c9 00              cmp #$0
ff036d d0 04              bne +4 [ff0373] IFff036b_end
ff036f a9 ff              lda #$ff
ff0371 4f 60              rts.a24
ff0373                  IFff036b_end:
ff0373 a9 00              lda #$0
ff0375 4f 60              rts.a24
ff0377                  IFff0364_end:
ff0377 c8                 iny
ff0378 c9 27              cmp #$27
ff037a d0 dc              bne -36 [ff0358] FORff0356_loop
ff037c                  FORff0356_end:
ff037c a9 00              lda #$0
ff037e 4f 60              rts.a24

ff0380 ; SUB DoClear:
ff0380 a2 02              ldx #$2
ff0382 4f 20 78 04 ff     jsr.a24 $ff0478
ff0387 a9 02              lda #$2
ff0389 8d ff 03           sta $03ff
ff038c a9 00              lda #$0
ff038e 8d fe 03           sta $03fe
ff0391 4f 60              rts.a24

ff0393 ; SUB DoMemory:
ff0393 4f 20 94 04 ff     jsr.a24 $ff0494
ff0398 a9 00              lda #$0
ff039a 4f 20 c5 03 ff     jsr.a24 $ff03c5
ff039f a9 ad              lda #$ad
ff03a1 4f 20 08 04 ff     jsr.a24 $ff0408
ff03a6 4f 20 12 04 ff     jsr.a24 $ff0412
ff03ab a2 00              ldx #$0
ff03ad                  loop_memory:
ff03ad b5 00              lda $00,X
ff03af 4f 20 c5 03 ff     jsr.a24 $ff03c5
ff03b4 4f 20 12 04 ff     jsr.a24 $ff0412
ff03b9 e8                 inx
ff03ba e0 08              cpx #$8
ff03bc d0 ef              bne -17 [ff03ad] loop_memory
ff03be 4f 20 94 04 ff     jsr.a24 $ff0494
ff03c3 4f 60              rts.a24

ff03c5 ; SUB PrintHexByte:
ff03c5 48                 pha
ff03c6 4a                 lsr
ff03c7 4a                 lsr
ff03c8 4a                 lsr
ff03c9 4a                 lsr
ff03ca 4f 20 d9 03 ff     jsr.a24 $ff03d9
ff03cf 68                 pla
ff03d0 29 0f              and #$f
ff03d2 4f 20 d9 03 ff     jsr.a24 $ff03d9
ff03d7 4f 60              rts.a24

ff03d9 ; SUB PrintHexDigit:
ff03d9 c9 0a              cmp #$a
ff03db 90 05              bcc +5 [ff03e2] print_hex_digit_09
ff03dd 18                 clc
ff03de 69 b7              adc #$b7
ff03e0 80 02              bra +2 [ff03e4] print_hex_digit
ff03e2                  print_hex_digit_09:
ff03e2 69 b0              adc #$b0
ff03e4                  print_hex_digit:
ff03e4 ac fe 03           ldy $03fe
ff03e7 91 fe              sta ($fe),Y
ff03e9 ee fe 03           inc $03fe
ff03ec 4f 60              rts.a24

ff03ee ; SUB PrintString:
ff03ee                  FORff03ee_start:
ff03ee                   ; FOR y = 0 TO 255 {
ff03ee a0 00              ldy #$0
ff03f0                  FORff03ee_loop:
ff03f0 2f b1 00           lda.t ($00),Y
ff03f3 f0 11              beq +17 [ff0406] forff03ee_end
ff03f5 84 02              sty $02
ff03f7 ac fe 03           ldy $03fe
ff03fa 91 fe              sta ($fe),Y
ff03fc ee fe 03           inc $03fe
ff03ff a4 02              ldy $02
ff0401 c8                 iny
ff0402 c9 ff              cmp #$ff
ff0404 d0 ea              bne -22 [ff03f0] FORff03ee_loop
ff0406                  FORff03ee_end:
ff0406 4f 60              rts.a24

ff0408 ; SUB PrintChar:
ff0408 ac fe 03           ldy $03fe
ff040b 91 fe              sta ($fe),Y
ff040d ee fe 03           inc $03fe
ff0410 4f 60              rts.a24

ff0412 ; SUB PrintSpace:
ff0412 a9 a0              lda #$a0
ff0414 ac fe 03           ldy $03fe
ff0417 91 fe              sta ($fe),Y
ff0419 ee fe 03           inc $03fe
ff041c 4f 60              rts.a24

ff041e ; SUB PrintDebugValue:
ff041e 48                 pha
ff041f 48                 pha
ff0420                   ; A >>= 4 
ff0420 4a                 lsr
ff0421 4a                 lsr
ff0422 4a                 lsr
ff0423 4a                 lsr
ff0424                   ; IF >= 10 {
ff0424 c9 0a              cmp #$a
ff0426 90 05              bcc +5 [ff042d] IFff0424_else
ff0428                   ; A += 183 
ff0428 18                 clc
ff0429 69 b7              adc #$b7
ff042b 80 03              bra +3 [ff0430] IFff0424_end
ff042d                  IFff0424_else:
ff042d                   ; ELSE
ff042d                   ; A += 176 
ff042d 18                 clc
ff042e 69 b0              adc #$b0
ff0430                  IFff0424_end:
ff0430 8d 26 04           sta $0426
ff0433 68                 pla
ff0434                   ; A &= 15 
ff0434 29 0f              and #$f
ff0436                   ; IF >= 10 {
ff0436 c9 0a              cmp #$a
ff0438 90 05              bcc +5 [ff043f] IFff0436_else
ff043a                   ; A += 183 
ff043a 18                 clc
ff043b 69 b7              adc #$b7
ff043d 80 03              bra +3 [ff0442] IFff0436_end
ff043f                  IFff0436_else:
ff043f                   ; ELSE
ff043f                   ; A += 176 
ff043f 18                 clc
ff0440 69 b0              adc #$b0
ff0442                  IFff0436_end:
ff0442 8d 27 04           sta $0427
ff0445 68                 pla
ff0446 4f 60              rts.a24

ff0448 ; SUB PrintDebugChar:
ff0448 8d 27 04           sta $0427
ff044b a9 a0              lda #$a0
ff044d 8d 26 04           sta $0426
ff0450 4f 60              rts.a24

ff0452 ; SUB PrintDebug2Chars:
ff0452 1f 8d 26 04        sta.w $000426
ff0456 4f 60              rts.a24

ff0458 ; SUB DoReset:
ff0458 ea                 nop
ff0459 4f 4c 00 02 ff     jmp.a24 $ff0200

ff045e ; SUB Do2Plus:
ff045e fc                 sws
ff045f a2 ff              ldx #$ff
ff0461 9a                 txs
ff0462 a9 00              lda #$0
ff0464 8d f4 03           sta $03f4
ff0467 6c fc ff           jmp ($fffc)

ff046a ; SUB ScreenBase:
ff046a                   ; X = M@$3ff 
ff046a ae ff 03           ldx $03ff
ff046d 2b                 xsl
ff046e 5f bd 00 80 ff     lda.w.a24 $ff8000,X
ff0473 1f 85 fe           sta.w $fe
ff0476 4f 60              rts.a24

ff0478 ; SUB ClearScreen:
ff0478 2b                 xsl
ff0479                  loop_clear_line:
ff0479 5f bd 00 80 ff     lda.w.a24 $ff8000,X
ff047e 1f 85 fe           sta.w $fe
ff0481 a9 a0              lda #$a0
ff0483 a0 00              ldy #$0
ff0485                  loop_clear_char:
ff0485 91 fe              sta ($fe),Y
ff0487 c8                 iny
ff0488 c0 28              cpy #$28
ff048a d0 f9              bne -7 [ff0485] loop_clear_char
ff048c e8                 inx
ff048d e8                 inx
ff048e e0 30              cpx #$30
ff0490 d0 e7              bne -25 [ff0479] loop_clear_line
ff0492 4f 60              rts.a24

ff0494 ; SUB NextLine:
ff0494 ad ff 03           lda $03ff
ff0497 c9 17              cmp #$17
ff0499 f0 0f              beq +15 [ff04aa] next_line_scroll
ff049b                  next_line_next_row:
ff049b ee ff 03           inc $03ff
ff049e 4f 20 6a 04 ff     jsr.a24 $ff046a
ff04a3 a9 00              lda #$0
ff04a5 8d fe 03           sta $03fe
ff04a8 4f 60              rts.a24
ff04aa                  next_line_scroll:
ff04aa a2 02              ldx #$2
ff04ac 4f 20 bd 04 ff     jsr.a24 $ff04bd
ff04b1 a9 17              lda #$17
ff04b3 8d ff 03           sta $03ff
ff04b6 a9 00              lda #$0
ff04b8 8d fe 03           sta $03fe
ff04bb 4f 60              rts.a24

ff04bd ; SUB ScrollScreen:
ff04bd 2b                 xsl
ff04be                  loop_scroll_line:
ff04be 5f bd 00 80 ff     lda.w.a24 $ff8000,X
ff04c3 1f 85 fe           sta.w $fe
ff04c6 5f bd 02 80 ff     lda.w.a24 $ff8002,X
ff04cb 1f 85 00           sta.w $00
ff04ce a0 00              ldy #$0
ff04d0                  loop_scroll_char:
ff04d0 b1 00              lda ($00),Y
ff04d2 91 fe              sta ($fe),Y
ff04d4 c8                 iny
ff04d5 c0 28              cpy #$28
ff04d7 d0 f7              bne -9 [ff04d0] loop_scroll_char
ff04d9 e8                 inx
ff04da e8                 inx
ff04db e0 2e              cpx #$2e
ff04dd d0 df              bne -33 [ff04be] loop_scroll_line
ff04df                  scroll_clear_last_line:
ff04df 5f bd 00 80 ff     lda.w.a24 $ff8000,X
ff04e4 1f 85 fe           sta.w $fe
ff04e7 1f a9 a0 a0        lda.w #$a0a0
ff04eb a0 00              ldy #$0
ff04ed                  loop_scroll_clear_line:
ff04ed 1f 91 fe           sta.w ($fe),Y
ff04f0 c8                 iny
ff04f1 c8                 iny
ff04f2 c0 28              cpy #$28
ff04f4 d0 f7              bne -9 [ff04ed] loop_scroll_clear_line
ff04f6                  done_with_scroll:
ff04f6 4f 60              rts.a24

ff04f8 ; SUB ClearInputBuffer:
ff04f8 a9 00              lda #$0
ff04fa a2 ff              ldx #$ff
ff04fc                  loop_clear_buffer:
ff04fc 9d 00 02           sta $0200,X
ff04ff ca                 dex
ff0500 d0 fa              bne -6 [ff04fc] loop_clear_buffer
ff0502 8d 00 02           sta $0200
ff0505 4f 60              rts.a24

ff0507 ; SUB DoC081:
ff0507 ad 81 c0           lda $c081
ff050a ad 81 c0           lda $c081
ff050d 4f 20 94 04 ff     jsr.a24 $ff0494
ff0512 a9 aa              lda #$aa
ff0514 8d 00 e0           sta $e000
ff0517 a9 e0              lda #$e0
ff0519 4f 20 c5 03 ff     jsr.a24 $ff03c5
ff051e a9 00              lda #$0
ff0520 4f 20 c5 03 ff     jsr.a24 $ff03c5
ff0525 a9 ad              lda #$ad
ff0527 4f 20 08 04 ff     jsr.a24 $ff0408
ff052c 4f 20 12 04 ff     jsr.a24 $ff0412
ff0531 a2 00              ldx #$0
ff0533                  loop_c081:
ff0533 bd 00 e0           lda $e000,X
ff0536 4f 20 c5 03 ff     jsr.a24 $ff03c5
ff053b 4f 20 12 04 ff     jsr.a24 $ff0412
ff0540 e8                 inx
ff0541 e0 08              cpx #$8
ff0543 d0 ee              bne -18 [ff0533] loop_c081
ff0545 4f 20 94 04 ff     jsr.a24 $ff0494
ff054a 4f 60              rts.a24

ff054c ; SUB DoC083:
ff054c ad 83 c0           lda $c083
ff054f ad 83 c0           lda $c083
ff0552 4f 20 94 04 ff     jsr.a24 $ff0494
ff0557 ad fe 03           lda $03fe
ff055a 8d 00 e0           sta $e000
ff055d a5 04              lda $04
ff055f 8d 01 e0           sta $e001
ff0562 a9 e0              lda #$e0
ff0564 4f 20 c5 03 ff     jsr.a24 $ff03c5
ff0569 a9 00              lda #$0
ff056b 4f 20 c5 03 ff     jsr.a24 $ff03c5
ff0570 a9 ad              lda #$ad
ff0572 4f 20 08 04 ff     jsr.a24 $ff0408
ff0577 4f 20 12 04 ff     jsr.a24 $ff0412
ff057c a2 00              ldx #$0
ff057e                  loop_c083:
ff057e bd 00 e0           lda $e000,X
ff0581 4f 20 c5 03 ff     jsr.a24 $ff03c5
ff0586 4f 20 12 04 ff     jsr.a24 $ff0412
ff058b e8                 inx
ff058c e0 08              cpx #$8
ff058e d0 ee              bne -18 [ff057e] loop_c083
ff0590 4f 20 94 04 ff     jsr.a24 $ff0494
ff0595 4f 60              rts.a24

; 31337 BYTES of FILLER

ff8000 ; DATA TextScreenBase:
ff8000 00 04
ff8002 80 04
ff8004 00 05
ff8006 80 05
ff8008 00 06
ff800a 80 06
ff800c 00 07
ff800e 80 07
ff8010 28 04
ff8012 a8 04
ff8014 28 05
ff8016 a8 05
ff8018 28 06
ff801a a8 06
ff801c 28 07
ff801e a8 07
ff8020 50 04
ff8022 d0 04
ff8024 50 05
ff8026 d0 05
ff8028 50 06
ff802a d0 06
ff802c 50 07
ff802e d0 07

ff8030 ; DATA Hello:
ff8030 41 70 70 6c 65 20 5d 5b 34 00

ff803a ; DATA CMD_Clear:
ff803a 63 6c 65 61 72 00

ff8040 ; DATA CMD_Memory:
ff8040 6d 65 6d 6f 72 79 00

ff8047 ; DATA CMD_Reset:
ff8047 72 65 73 65 74 00

ff804d ; DATA CMD_2Plus:
ff804d 32 2b 00

ff8050 ; DATA CMD_C081:
ff8050 63 30 38 31 00

ff8055 ; DATA CMD_C083:
ff8055 63 30 38 33 00

ff805a ; DATA CommandListLength:
ff805a 06

ff805b ; DATA CommandList:
ff805b 3a 80 ff
ff805e 40 80 ff
ff8061 47 80 ff
ff8064 4d 80 ff
ff8067 50 80 ff
ff806a 55 80 ff

; 32650 BYTES of FILLER

fffff7 ; DATA Vectors:
fffff7 00 00 00
fffffa 00 00 ff
fffffd 00 00 00
